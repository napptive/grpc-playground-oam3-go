// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: playground-oam3/entities.proto

package grpc_playground_oam3_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Annotations

	// no validation rules for Labels

	// no validation rules for Uid

	// no validation rules for CreationTimestamp

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}
	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Reference with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reference with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReferenceMultiError, or nil
// if none found.
func (m *Reference) ValidateAll() error {
	return m.validate(true)
}

func (m *Reference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ReferenceMultiError(errors)
	}
	return nil
}

// ReferenceMultiError is an error wrapping multiple validation errors returned
// by Reference.ValidateAll() if the designated constraints aren't met.
type ReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferenceMultiError) AllErrors() []error { return m }

// ReferenceValidationError is the validation error returned by
// Reference.Validate if the designated constraints aren't met.
type ReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferenceValidationError) ErrorName() string { return "ReferenceValidationError" }

// Error satisfies the builtin error interface
func (e ReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferenceValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomStatus

	// no validation rules for HealthPolicy

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}
	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on ComponentDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ComponentDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentDefinitionMultiError, or nil if none found.
func (m *ComponentDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentDefinitionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentDefinitionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ComponentDefinitionMultiError(errors)
	}
	return nil
}

// ComponentDefinitionMultiError is an error wrapping multiple validation
// errors returned by ComponentDefinition.ValidateAll() if the designated
// constraints aren't met.
type ComponentDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentDefinitionMultiError) AllErrors() []error { return m }

// ComponentDefinitionValidationError is the validation error returned by
// ComponentDefinition.Validate if the designated constraints aren't met.
type ComponentDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentDefinitionValidationError) ErrorName() string {
	return "ComponentDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentDefinitionValidationError{}

// Validate checks the field values on ComponentDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ComponentDefinitionSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentDefinitionSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentDefinitionSpecMultiError, or nil if none found.
func (m *ComponentDefinitionSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentDefinitionSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentDefinitionSpecValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentDefinitionSpecValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentDefinitionSpecValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildResourceKinds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentDefinitionSpecValidationError{
						field:  fmt.Sprintf("ChildResourceKinds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentDefinitionSpecValidationError{
						field:  fmt.Sprintf("ChildResourceKinds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentDefinitionSpecValidationError{
					field:  fmt.Sprintf("ChildResourceKinds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RevisionLabel

	// no validation rules for PodSpecPath

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentDefinitionSpecValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentDefinitionSpecValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentDefinitionSpecValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchematic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchematic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentDefinitionSpecValidationError{
				field:  "Schematic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ComponentDefinitionSpecMultiError(errors)
	}
	return nil
}

// ComponentDefinitionSpecMultiError is an error wrapping multiple validation
// errors returned by ComponentDefinitionSpec.ValidateAll() if the designated
// constraints aren't met.
type ComponentDefinitionSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentDefinitionSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentDefinitionSpecMultiError) AllErrors() []error { return m }

// ComponentDefinitionSpecValidationError is the validation error returned by
// ComponentDefinitionSpec.Validate if the designated constraints aren't met.
type ComponentDefinitionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentDefinitionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentDefinitionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentDefinitionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentDefinitionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentDefinitionSpecValidationError) ErrorName() string {
	return "ComponentDefinitionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentDefinitionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentDefinitionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentDefinitionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentDefinitionSpecValidationError{}

// Validate checks the field values on ChildResourceKind with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChildResourceKind) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChildResourceKind with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChildResourceKindMultiError, or nil if none found.
func (m *ChildResourceKind) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildResourceKind) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	// no validation rules for Selector

	if len(errors) > 0 {
		return ChildResourceKindMultiError(errors)
	}
	return nil
}

// ChildResourceKindMultiError is an error wrapping multiple validation errors
// returned by ChildResourceKind.ValidateAll() if the designated constraints
// aren't met.
type ChildResourceKindMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildResourceKindMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildResourceKindMultiError) AllErrors() []error { return m }

// ChildResourceKindValidationError is the validation error returned by
// ChildResourceKind.Validate if the designated constraints aren't met.
type ChildResourceKindValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildResourceKindValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildResourceKindValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildResourceKindValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildResourceKindValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildResourceKindValidationError) ErrorName() string {
	return "ChildResourceKindValidationError"
}

// Error satisfies the builtin error interface
func (e ChildResourceKindValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildResourceKind.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildResourceKindValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildResourceKindValidationError{}

// Validate checks the field values on Schematic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schematic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schematic with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SchematicMultiError, or nil
// if none found.
func (m *Schematic) ValidateAll() error {
	return m.validate(true)
}

func (m *Schematic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKube()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Kube",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Kube",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKube()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchematicValidationError{
				field:  "Kube",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Cue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Cue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchematicValidationError{
				field:  "Cue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHelm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Helm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Helm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHelm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchematicValidationError{
				field:  "Helm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTerraform()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Terraform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchematicValidationError{
					field:  "Terraform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTerraform()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchematicValidationError{
				field:  "Terraform",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SchematicMultiError(errors)
	}
	return nil
}

// SchematicMultiError is an error wrapping multiple validation errors returned
// by Schematic.ValidateAll() if the designated constraints aren't met.
type SchematicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchematicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchematicMultiError) AllErrors() []error { return m }

// SchematicValidationError is the validation error returned by
// Schematic.Validate if the designated constraints aren't met.
type SchematicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchematicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchematicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchematicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchematicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchematicValidationError) ErrorName() string { return "SchematicValidationError" }

// Error satisfies the builtin error interface
func (e SchematicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchematic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchematicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchematicValidationError{}

// Validate checks the field values on Kube with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Kube) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kube with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KubeMultiError, or nil if none found.
func (m *Kube) ValidateAll() error {
	return m.validate(true)
}

func (m *Kube) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KubeValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KubeValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubeValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KubeValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KubeValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubeValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return KubeMultiError(errors)
	}
	return nil
}

// KubeMultiError is an error wrapping multiple validation errors returned by
// Kube.ValidateAll() if the designated constraints aren't met.
type KubeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeMultiError) AllErrors() []error { return m }

// KubeValidationError is the validation error returned by Kube.Validate if the
// designated constraints aren't met.
type KubeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeValidationError) ErrorName() string { return "KubeValidationError" }

// Error satisfies the builtin error interface
func (e KubeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKube.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeValidationError{}

// Validate checks the field values on KubeParameter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KubeParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeParameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KubeParameterMultiError, or
// nil if none found.
func (m *KubeParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Required

	// no validation rules for Description

	if len(errors) > 0 {
		return KubeParameterMultiError(errors)
	}
	return nil
}

// KubeParameterMultiError is an error wrapping multiple validation errors
// returned by KubeParameter.ValidateAll() if the designated constraints
// aren't met.
type KubeParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeParameterMultiError) AllErrors() []error { return m }

// KubeParameterValidationError is the validation error returned by
// KubeParameter.Validate if the designated constraints aren't met.
type KubeParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeParameterValidationError) ErrorName() string { return "KubeParameterValidationError" }

// Error satisfies the builtin error interface
func (e KubeParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeParameterValidationError{}

// Validate checks the field values on CUE with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *CUE) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CUE with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CUEMultiError, or nil if none found.
func (m *CUE) ValidateAll() error {
	return m.validate(true)
}

func (m *CUE) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Template

	if len(errors) > 0 {
		return CUEMultiError(errors)
	}
	return nil
}

// CUEMultiError is an error wrapping multiple validation errors returned by
// CUE.ValidateAll() if the designated constraints aren't met.
type CUEMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CUEMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CUEMultiError) AllErrors() []error { return m }

// CUEValidationError is the validation error returned by CUE.Validate if the
// designated constraints aren't met.
type CUEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CUEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CUEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CUEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CUEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CUEValidationError) ErrorName() string { return "CUEValidationError" }

// Error satisfies the builtin error interface
func (e CUEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCUE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CUEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CUEValidationError{}

// Validate checks the field values on HELM with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *HELM) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HELM with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HELMMultiError, or nil if none found.
func (m *HELM) ValidateAll() error {
	return m.validate(true)
}

func (m *HELM) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HELMValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HELMValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HELMValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepository()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HELMValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HELMValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepository()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HELMValidationError{
				field:  "Repository",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HELMMultiError(errors)
	}
	return nil
}

// HELMMultiError is an error wrapping multiple validation errors returned by
// HELM.ValidateAll() if the designated constraints aren't met.
type HELMMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HELMMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HELMMultiError) AllErrors() []error { return m }

// HELMValidationError is the validation error returned by HELM.Validate if the
// designated constraints aren't met.
type HELMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HELMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HELMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HELMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HELMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HELMValidationError) ErrorName() string { return "HELMValidationError" }

// Error satisfies the builtin error interface
func (e HELMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHELM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HELMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HELMValidationError{}

// Validate checks the field values on Terraform with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Terraform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Terraform with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TerraformMultiError, or nil
// if none found.
func (m *Terraform) ValidateAll() error {
	return m.validate(true)
}

func (m *Terraform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Configuration

	// no validation rules for Type

	// no validation rules for Path

	if all {
		switch v := interface{}(m.GetWriteConnectionSecretToReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TerraformValidationError{
					field:  "WriteConnectionSecretToReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TerraformValidationError{
					field:  "WriteConnectionSecretToReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWriteConnectionSecretToReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TerraformValidationError{
				field:  "WriteConnectionSecretToReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProviderRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TerraformValidationError{
					field:  "ProviderRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TerraformValidationError{
					field:  "ProviderRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProviderRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TerraformValidationError{
				field:  "ProviderRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeleteResource

	// no validation rules for Region

	if len(errors) > 0 {
		return TerraformMultiError(errors)
	}
	return nil
}

// TerraformMultiError is an error wrapping multiple validation errors returned
// by Terraform.ValidateAll() if the designated constraints aren't met.
type TerraformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerraformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerraformMultiError) AllErrors() []error { return m }

// TerraformValidationError is the validation error returned by
// Terraform.Validate if the designated constraints aren't met.
type TerraformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerraformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerraformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerraformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerraformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerraformValidationError) ErrorName() string { return "TerraformValidationError" }

// Error satisfies the builtin error interface
func (e TerraformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerraform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerraformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerraformValidationError{}

// Validate checks the field values on WorkloadGVK with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkloadGVK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkloadGVK with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkloadGVKMultiError, or
// nil if none found.
func (m *WorkloadGVK) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkloadGVK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if len(errors) > 0 {
		return WorkloadGVKMultiError(errors)
	}
	return nil
}

// WorkloadGVKMultiError is an error wrapping multiple validation errors
// returned by WorkloadGVK.ValidateAll() if the designated constraints aren't met.
type WorkloadGVKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkloadGVKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkloadGVKMultiError) AllErrors() []error { return m }

// WorkloadGVKValidationError is the validation error returned by
// WorkloadGVK.Validate if the designated constraints aren't met.
type WorkloadGVKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadGVKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadGVKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadGVKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadGVKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadGVKValidationError) ErrorName() string { return "WorkloadGVKValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadGVKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadGVK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadGVKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadGVKValidationError{}

// Validate checks the field values on WorkloadTypeDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkloadTypeDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkloadTypeDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkloadTypeDescriptorMultiError, or nil if none found.
func (m *WorkloadTypeDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkloadTypeDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadTypeDescriptorValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadTypeDescriptorValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadTypeDescriptorValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkloadTypeDescriptorMultiError(errors)
	}
	return nil
}

// WorkloadTypeDescriptorMultiError is an error wrapping multiple validation
// errors returned by WorkloadTypeDescriptor.ValidateAll() if the designated
// constraints aren't met.
type WorkloadTypeDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkloadTypeDescriptorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkloadTypeDescriptorMultiError) AllErrors() []error { return m }

// WorkloadTypeDescriptorValidationError is the validation error returned by
// WorkloadTypeDescriptor.Validate if the designated constraints aren't met.
type WorkloadTypeDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadTypeDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadTypeDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadTypeDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadTypeDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadTypeDescriptorValidationError) ErrorName() string {
	return "WorkloadTypeDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e WorkloadTypeDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadTypeDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadTypeDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadTypeDescriptorValidationError{}

// Validate checks the field values on TraitDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TraitDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TraitDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TraitDefinitionMultiError, or nil if none found.
func (m *TraitDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *TraitDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraitDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraitDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitDefinitionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraitDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraitDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitDefinitionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TraitDefinitionMultiError(errors)
	}
	return nil
}

// TraitDefinitionMultiError is an error wrapping multiple validation errors
// returned by TraitDefinition.ValidateAll() if the designated constraints
// aren't met.
type TraitDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TraitDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TraitDefinitionMultiError) AllErrors() []error { return m }

// TraitDefinitionValidationError is the validation error returned by
// TraitDefinition.Validate if the designated constraints aren't met.
type TraitDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraitDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraitDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraitDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraitDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraitDefinitionValidationError) ErrorName() string { return "TraitDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e TraitDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraitDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraitDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraitDefinitionValidationError{}

// Validate checks the field values on TraitDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TraitDefinitionSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TraitDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TraitDefinitionSpecMultiError, or nil if none found.
func (m *TraitDefinitionSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *TraitDefinitionSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinitionRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraitDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraitDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitDefinitionSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RevisionEnabled

	// no validation rules for WorkloadRefPath

	// no validation rules for PodDisruptive

	if all {
		switch v := interface{}(m.GetSchematic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraitDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraitDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchematic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitDefinitionSpecValidationError{
				field:  "Schematic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraitDefinitionSpecValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraitDefinitionSpecValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraitDefinitionSpecValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ManageWorkload

	// no validation rules for SkipRevisionAffect

	if len(errors) > 0 {
		return TraitDefinitionSpecMultiError(errors)
	}
	return nil
}

// TraitDefinitionSpecMultiError is an error wrapping multiple validation
// errors returned by TraitDefinitionSpec.ValidateAll() if the designated
// constraints aren't met.
type TraitDefinitionSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TraitDefinitionSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TraitDefinitionSpecMultiError) AllErrors() []error { return m }

// TraitDefinitionSpecValidationError is the validation error returned by
// TraitDefinitionSpec.Validate if the designated constraints aren't met.
type TraitDefinitionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraitDefinitionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraitDefinitionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraitDefinitionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraitDefinitionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraitDefinitionSpecValidationError) ErrorName() string {
	return "TraitDefinitionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e TraitDefinitionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraitDefinitionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraitDefinitionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraitDefinitionSpecValidationError{}

// Validate checks the field values on ScopeDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScopeDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScopeDefinitionMultiError, or nil if none found.
func (m *ScopeDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeDefinitionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeDefinitionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScopeDefinitionMultiError(errors)
	}
	return nil
}

// ScopeDefinitionMultiError is an error wrapping multiple validation errors
// returned by ScopeDefinition.ValidateAll() if the designated constraints
// aren't met.
type ScopeDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeDefinitionMultiError) AllErrors() []error { return m }

// ScopeDefinitionValidationError is the validation error returned by
// ScopeDefinition.Validate if the designated constraints aren't met.
type ScopeDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeDefinitionValidationError) ErrorName() string { return "ScopeDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e ScopeDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeDefinitionValidationError{}

// Validate checks the field values on ScopeDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScopeDefinitionSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScopeDefinitionSpecMultiError, or nil if none found.
func (m *ScopeDefinitionSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeDefinitionSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinitionRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeDefinitionSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkloadRefsPath

	// no validation rules for AllowComponentOverlap

	if len(errors) > 0 {
		return ScopeDefinitionSpecMultiError(errors)
	}
	return nil
}

// ScopeDefinitionSpecMultiError is an error wrapping multiple validation
// errors returned by ScopeDefinitionSpec.ValidateAll() if the designated
// constraints aren't met.
type ScopeDefinitionSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeDefinitionSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeDefinitionSpecMultiError) AllErrors() []error { return m }

// ScopeDefinitionSpecValidationError is the validation error returned by
// ScopeDefinitionSpec.Validate if the designated constraints aren't met.
type ScopeDefinitionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeDefinitionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeDefinitionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeDefinitionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeDefinitionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeDefinitionSpecValidationError) ErrorName() string {
	return "ScopeDefinitionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e ScopeDefinitionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeDefinitionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeDefinitionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeDefinitionSpecValidationError{}

// Validate checks the field values on PolicyDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyDefinitionMultiError, or nil if none found.
func (m *PolicyDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyDefinitionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyDefinitionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyDefinitionMultiError(errors)
	}
	return nil
}

// PolicyDefinitionMultiError is an error wrapping multiple validation errors
// returned by PolicyDefinition.ValidateAll() if the designated constraints
// aren't met.
type PolicyDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyDefinitionMultiError) AllErrors() []error { return m }

// PolicyDefinitionValidationError is the validation error returned by
// PolicyDefinition.Validate if the designated constraints aren't met.
type PolicyDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyDefinitionValidationError) ErrorName() string { return "PolicyDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e PolicyDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyDefinitionValidationError{}

// Validate checks the field values on PolicyDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PolicyDefinitionSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyDefinitionSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyDefinitionSpecMultiError, or nil if none found.
func (m *PolicyDefinitionSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyDefinitionSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinitionRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyDefinitionSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchematic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchematic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyDefinitionSpecValidationError{
				field:  "Schematic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyDefinitionSpecMultiError(errors)
	}
	return nil
}

// PolicyDefinitionSpecMultiError is an error wrapping multiple validation
// errors returned by PolicyDefinitionSpec.ValidateAll() if the designated
// constraints aren't met.
type PolicyDefinitionSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyDefinitionSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyDefinitionSpecMultiError) AllErrors() []error { return m }

// PolicyDefinitionSpecValidationError is the validation error returned by
// PolicyDefinitionSpec.Validate if the designated constraints aren't met.
type PolicyDefinitionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyDefinitionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyDefinitionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyDefinitionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyDefinitionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyDefinitionSpecValidationError) ErrorName() string {
	return "PolicyDefinitionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e PolicyDefinitionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyDefinitionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyDefinitionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyDefinitionSpecValidationError{}

// Validate checks the field values on WorkflowStepDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowStepDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowStepDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowStepDefinitionMultiError, or nil if none found.
func (m *WorkflowStepDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowStepDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowStepDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowStepDefinitionValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowStepDefinitionValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowStepDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowStepDefinitionValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowStepDefinitionValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowStepDefinitionMultiError(errors)
	}
	return nil
}

// WorkflowStepDefinitionMultiError is an error wrapping multiple validation
// errors returned by WorkflowStepDefinition.ValidateAll() if the designated
// constraints aren't met.
type WorkflowStepDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowStepDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowStepDefinitionMultiError) AllErrors() []error { return m }

// WorkflowStepDefinitionValidationError is the validation error returned by
// WorkflowStepDefinition.Validate if the designated constraints aren't met.
type WorkflowStepDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowStepDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowStepDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowStepDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowStepDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowStepDefinitionValidationError) ErrorName() string {
	return "WorkflowStepDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowStepDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowStepDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowStepDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowStepDefinitionValidationError{}

// Validate checks the field values on WorkflowStepDefinitionSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowStepDefinitionSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowStepDefinitionSpec with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowStepDefinitionSpecMultiError, or nil if none found.
func (m *WorkflowStepDefinitionSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowStepDefinitionSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinitionRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowStepDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowStepDefinitionSpecValidationError{
					field:  "DefinitionRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinitionRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowStepDefinitionSpecValidationError{
				field:  "DefinitionRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchematic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowStepDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowStepDefinitionSpecValidationError{
					field:  "Schematic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchematic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowStepDefinitionSpecValidationError{
				field:  "Schematic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowStepDefinitionSpecMultiError(errors)
	}
	return nil
}

// WorkflowStepDefinitionSpecMultiError is an error wrapping multiple
// validation errors returned by WorkflowStepDefinitionSpec.ValidateAll() if
// the designated constraints aren't met.
type WorkflowStepDefinitionSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowStepDefinitionSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowStepDefinitionSpecMultiError) AllErrors() []error { return m }

// WorkflowStepDefinitionSpecValidationError is the validation error returned
// by WorkflowStepDefinitionSpec.Validate if the designated constraints aren't met.
type WorkflowStepDefinitionSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowStepDefinitionSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowStepDefinitionSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowStepDefinitionSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowStepDefinitionSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowStepDefinitionSpecValidationError) ErrorName() string {
	return "WorkflowStepDefinitionSpecValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowStepDefinitionSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowStepDefinitionSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowStepDefinitionSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowStepDefinitionSpecValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Application) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplicationMultiError, or
// nil if none found.
func (m *Application) ValidateAll() error {
	return m.validate(true)
}

func (m *Application) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationMultiError(errors)
	}
	return nil
}

// ApplicationMultiError is an error wrapping multiple validation errors
// returned by Application.ValidateAll() if the designated constraints aren't met.
type ApplicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationMultiError) AllErrors() []error { return m }

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ApplicationSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationSpecMultiError, or nil if none found.
func (m *ApplicationSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationSpecValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationSpecValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationSpecValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationSpecValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationSpecValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationSpecValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationSpecValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationSpecValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationSpecValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationSpecMultiError(errors)
	}
	return nil
}

// ApplicationSpecMultiError is an error wrapping multiple validation errors
// returned by ApplicationSpec.ValidateAll() if the designated constraints
// aren't met.
type ApplicationSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationSpecMultiError) AllErrors() []error { return m }

// ApplicationSpecValidationError is the validation error returned by
// ApplicationSpec.Validate if the designated constraints aren't met.
type ApplicationSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationSpecValidationError) ErrorName() string { return "ApplicationSpecValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationSpecValidationError{}

// Validate checks the field values on ApplicationComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationComponent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationComponentMultiError, or nil if none found.
func (m *ApplicationComponent) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationComponent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ExternalRevision

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationComponentValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationComponentValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationComponentValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationComponentValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationComponentValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationComponentValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationComponentValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTraits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationComponentValidationError{
						field:  fmt.Sprintf("Traits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationComponentValidationError{
						field:  fmt.Sprintf("Traits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentValidationError{
					field:  fmt.Sprintf("Traits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Scopes

	if len(errors) > 0 {
		return ApplicationComponentMultiError(errors)
	}
	return nil
}

// ApplicationComponentMultiError is an error wrapping multiple validation
// errors returned by ApplicationComponent.ValidateAll() if the designated
// constraints aren't met.
type ApplicationComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationComponentMultiError) AllErrors() []error { return m }

// ApplicationComponentValidationError is the validation error returned by
// ApplicationComponent.Validate if the designated constraints aren't met.
type ApplicationComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationComponentValidationError) ErrorName() string {
	return "ApplicationComponentValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationComponentValidationError{}

// Validate checks the field values on InputItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InputItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InputItemMultiError, or nil
// if none found.
func (m *InputItem) ValidateAll() error {
	return m.validate(true)
}

func (m *InputItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParameterKey

	// no validation rules for From

	if len(errors) > 0 {
		return InputItemMultiError(errors)
	}
	return nil
}

// InputItemMultiError is an error wrapping multiple validation errors returned
// by InputItem.ValidateAll() if the designated constraints aren't met.
type InputItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputItemMultiError) AllErrors() []error { return m }

// InputItemValidationError is the validation error returned by
// InputItem.Validate if the designated constraints aren't met.
type InputItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputItemValidationError) ErrorName() string { return "InputItemValidationError" }

// Error satisfies the builtin error interface
func (e InputItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputItemValidationError{}

// Validate checks the field values on OutputItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OutputItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OutputItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OutputItemMultiError, or
// nil if none found.
func (m *OutputItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OutputItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ValueFrom

	// no validation rules for Name

	if len(errors) > 0 {
		return OutputItemMultiError(errors)
	}
	return nil
}

// OutputItemMultiError is an error wrapping multiple validation errors
// returned by OutputItem.ValidateAll() if the designated constraints aren't met.
type OutputItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputItemMultiError) AllErrors() []error { return m }

// OutputItemValidationError is the validation error returned by
// OutputItem.Validate if the designated constraints aren't met.
type OutputItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputItemValidationError) ErrorName() string { return "OutputItemValidationError" }

// Error satisfies the builtin error interface
func (e OutputItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputItemValidationError{}

// Validate checks the field values on ApplicationTrait with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationTrait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationTrait with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationTraitMultiError, or nil if none found.
func (m *ApplicationTrait) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationTrait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationTraitValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationTraitValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationTraitValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationTraitMultiError(errors)
	}
	return nil
}

// ApplicationTraitMultiError is an error wrapping multiple validation errors
// returned by ApplicationTrait.ValidateAll() if the designated constraints
// aren't met.
type ApplicationTraitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationTraitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationTraitMultiError) AllErrors() []error { return m }

// ApplicationTraitValidationError is the validation error returned by
// ApplicationTrait.Validate if the designated constraints aren't met.
type ApplicationTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationTraitValidationError) ErrorName() string { return "ApplicationTraitValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationTraitValidationError{}

// Validate checks the field values on ApplicationPolicy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationPolicyMultiError, or nil if none found.
func (m *ApplicationPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationPolicyValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationPolicyValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationPolicyValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationPolicyMultiError(errors)
	}
	return nil
}

// ApplicationPolicyMultiError is an error wrapping multiple validation errors
// returned by ApplicationPolicy.ValidateAll() if the designated constraints
// aren't met.
type ApplicationPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationPolicyMultiError) AllErrors() []error { return m }

// ApplicationPolicyValidationError is the validation error returned by
// ApplicationPolicy.Validate if the designated constraints aren't met.
type ApplicationPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPolicyValidationError) ErrorName() string {
	return "ApplicationPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPolicyValidationError{}

// Validate checks the field values on ApplicationWorkflow with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationWorkflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationWorkflow with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationWorkflowMultiError, or nil if none found.
func (m *ApplicationWorkflow) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationWorkflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationWorkflowValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationWorkflowValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationWorkflowValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationWorkflowMultiError(errors)
	}
	return nil
}

// ApplicationWorkflowMultiError is an error wrapping multiple validation
// errors returned by ApplicationWorkflow.ValidateAll() if the designated
// constraints aren't met.
type ApplicationWorkflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationWorkflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationWorkflowMultiError) AllErrors() []error { return m }

// ApplicationWorkflowValidationError is the validation error returned by
// ApplicationWorkflow.Validate if the designated constraints aren't met.
type ApplicationWorkflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWorkflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWorkflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWorkflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWorkflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWorkflowValidationError) ErrorName() string {
	return "ApplicationWorkflowValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWorkflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWorkflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWorkflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWorkflowValidationError{}

// Validate checks the field values on WorkflowStep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowStep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowStepMultiError, or
// nil if none found.
func (m *WorkflowStep) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowStepValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowStepValidationError{
					field:  "Properties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowStepValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowStepValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowStepValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowStepValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowStepValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowStepValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowStepValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowStepMultiError(errors)
	}
	return nil
}

// WorkflowStepMultiError is an error wrapping multiple validation errors
// returned by WorkflowStep.ValidateAll() if the designated constraints aren't met.
type WorkflowStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowStepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowStepMultiError) AllErrors() []error { return m }

// WorkflowStepValidationError is the validation error returned by
// WorkflowStep.Validate if the designated constraints aren't met.
type WorkflowStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowStepValidationError) ErrorName() string { return "WorkflowStepValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowStepValidationError{}

// Validate checks the field values on ApplicationStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationStatusMultiError, or nil if none found.
func (m *ApplicationStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationStatusValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationStatusValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationStatusValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationStatusValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationStatusValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationStatusValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationStatusValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationStatusValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationStatusValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationStatusMultiError(errors)
	}
	return nil
}

// ApplicationStatusMultiError is an error wrapping multiple validation errors
// returned by ApplicationStatus.ValidateAll() if the designated constraints
// aren't met.
type ApplicationStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationStatusMultiError) AllErrors() []error { return m }

// ApplicationStatusValidationError is the validation error returned by
// ApplicationStatus.Validate if the designated constraints aren't met.
type ApplicationStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationStatusValidationError) ErrorName() string {
	return "ApplicationStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationStatusValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Condition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionMultiError, or nil
// if none found.
func (m *Condition) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return ConditionMultiError(errors)
	}
	return nil
}

// ConditionMultiError is an error wrapping multiple validation errors returned
// by Condition.ValidateAll() if the designated constraints aren't met.
type ConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionMultiError) AllErrors() []error { return m }

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on ApplicationComponentStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationComponentStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationComponentStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationComponentStatusMultiError, or nil if none found.
func (m *ApplicationComponentStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationComponentStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Healthy

	// no validation rules for Message

	for idx, item := range m.GetTraits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationComponentStatusValidationError{
						field:  fmt.Sprintf("Traits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationComponentStatusValidationError{
						field:  fmt.Sprintf("Traits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationComponentStatusValidationError{
					field:  fmt.Sprintf("Traits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationComponentStatusMultiError(errors)
	}
	return nil
}

// ApplicationComponentStatusMultiError is an error wrapping multiple
// validation errors returned by ApplicationComponentStatus.ValidateAll() if
// the designated constraints aren't met.
type ApplicationComponentStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationComponentStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationComponentStatusMultiError) AllErrors() []error { return m }

// ApplicationComponentStatusValidationError is the validation error returned
// by ApplicationComponentStatus.Validate if the designated constraints aren't met.
type ApplicationComponentStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationComponentStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationComponentStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationComponentStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationComponentStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationComponentStatusValidationError) ErrorName() string {
	return "ApplicationComponentStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationComponentStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationComponentStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationComponentStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationComponentStatusValidationError{}

// Validate checks the field values on ApplicationTraitStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationTraitStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationTraitStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationTraitStatusMultiError, or nil if none found.
func (m *ApplicationTraitStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationTraitStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Healthy

	// no validation rules for Message

	if len(errors) > 0 {
		return ApplicationTraitStatusMultiError(errors)
	}
	return nil
}

// ApplicationTraitStatusMultiError is an error wrapping multiple validation
// errors returned by ApplicationTraitStatus.ValidateAll() if the designated
// constraints aren't met.
type ApplicationTraitStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationTraitStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationTraitStatusMultiError) AllErrors() []error { return m }

// ApplicationTraitStatusValidationError is the validation error returned by
// ApplicationTraitStatus.Validate if the designated constraints aren't met.
type ApplicationTraitStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationTraitStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationTraitStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationTraitStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationTraitStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationTraitStatusValidationError) ErrorName() string {
	return "ApplicationTraitStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationTraitStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationTraitStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationTraitStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationTraitStatusValidationError{}

// Validate checks the field values on WorkflowStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowStatusMultiError,
// or nil if none found.
func (m *WorkflowStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppRevision

	// no validation rules for Mode

	// no validation rules for Message

	// no validation rules for Suspend

	// no validation rules for Terminated

	// no validation rules for Finished

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowStatusValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowStatusValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowStatusValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StartTime

	if len(errors) > 0 {
		return WorkflowStatusMultiError(errors)
	}
	return nil
}

// WorkflowStatusMultiError is an error wrapping multiple validation errors
// returned by WorkflowStatus.ValidateAll() if the designated constraints
// aren't met.
type WorkflowStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowStatusMultiError) AllErrors() []error { return m }

// WorkflowStatusValidationError is the validation error returned by
// WorkflowStatus.Validate if the designated constraints aren't met.
type WorkflowStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowStatusValidationError) ErrorName() string { return "WorkflowStatusValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowStatusValidationError{}

// Validate checks the field values on WorkflowStepStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowStepStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowStepStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowStepStatusMultiError, or nil if none found.
func (m *WorkflowStepStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowStepStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Phase

	// no validation rules for Message

	// no validation rules for Reason

	// no validation rules for FirstExecuteTime

	// no validation rules for LastExecuteTime

	if len(errors) > 0 {
		return WorkflowStepStatusMultiError(errors)
	}
	return nil
}

// WorkflowStepStatusMultiError is an error wrapping multiple validation errors
// returned by WorkflowStepStatus.ValidateAll() if the designated constraints
// aren't met.
type WorkflowStepStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowStepStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowStepStatusMultiError) AllErrors() []error { return m }

// WorkflowStepStatusValidationError is the validation error returned by
// WorkflowStepStatus.Validate if the designated constraints aren't met.
type WorkflowStepStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowStepStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowStepStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowStepStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowStepStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowStepStatusValidationError) ErrorName() string {
	return "WorkflowStepStatusValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowStepStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowStepStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowStepStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowStepStatusValidationError{}
