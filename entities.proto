syntax = "proto3";

package playground_oam3;
option go_package = "github.com/napptive/grpc-playground-oam3-go;grpc_playground_oam3_go";

import "google/protobuf/struct.proto";

//
// Common
//

// Metadata associated with a kubernetes entity.
message Metadata{
    // Name of the resource
    string name = 1;
    // Annotations of the resource.
    map<string, string> annotations = 2;
    // Labels related to the resource.
    map<string, string> labels = 3;
    // UID is the unique in time and space value for this object. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 4;
    // CreationTimestamp with the server time when the object was created.
    // It is represented in RFC3339 form and is in UTC.
    string creation_timestamp = 5;
}

// Reference to a named object.
message Reference{
    // Name of the referenced object.
    string name = 1;
    // Namespace of the referenced object.
    string namespace = 2;
}

// Status defines the loop back status of the abstraction by using CUE template
message Status{
    // CustomStatus defines the custom status message that could display to user
    string custom_status = 1;
    // HealthPolicy defines the health check policy for the abstraction
    string health_policy = 2;
}

//
// ComponentDefinition
// 

// ComponentDefinition with the OAM3 componentdefinition.
message ComponentDefinition{
    // ApiVersion of the given component definition.
    string api_version = 1;
    // Kind of the component definition.
    string kind = 2;
    // Metadata associated with the component definition.
    Metadata metadata = 3;
    // Spec of the component definition.
    ComponentDefinitionSpec spec = 4;
}

//ComponentDefinitionSpec with the component specification.
message ComponentDefinitionSpec{
    // Workload is a workload type descriptor
    WorkloadTypeDescriptor workload = 1;
    // ChildResourceKinds are the list of GVK of the child resources this workload generates
    repeated ChildResourceKind child_resource_kinds = 2;
    // RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload
	// can be used by trait to create resource selectors(e.g. label selector for pods).
    string revision_label = 3;
    // PodSpecPath indicates where/if this workload has K8s podSpec field
	// if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
    string pod_spec_path = 4;
    // Status defines the custom health policy and status message for workload
    Status status = 5;
    // Schematic defines the data format and template of the encapsulation of the workload
	Schematic schematic = 6;
}

message ChildResourceKind{
    string api_version = 1;
    string kind = 2;
    map<string, string> selector = 3;
}

// Schematic defines the encapsulation of this capability(workload/trait/scope),
// the encapsulation can be defined in different ways, e.g. CUE/HCL(terraform)/KUBE(K8s Object)/HELM, etc...
message Schematic{
    Kube kube = 1;
    CUE cue = 2;
    HELM helm = 3;
    Terraform terraform = 4;
}

// Kube defines the encapsulation in raw Kubernetes resource format
message Kube{
    // Template defines the raw Kubernetes resource
    google.protobuf.Struct template = 1;
    // Parameters defines configurable parameters
    repeated KubeParameter parameters = 2;
}

// KubeParameter defines a component parameter
message KubeParameter {
    // Name of the parameter
    string name = 1;
    // type with the type of the parameter. Only basic types supported (string, number and boolean)
    string type = 2;
    // FieldPaths with an array of JSON paths that will be overwritten by the value of this parameter.
    repeated string fieldPaths = 3;
    // Required specifies if the value for this parameter must be supplied or not
    bool required = 4;
    // Description of the parameter
    string description = 5;
}

// CUE defines the encapsulation in CUE format.
message CUE{
    // Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field.
	// Template is a required field if CUE is defined in Capability Definition.
	string template = 1;
}

// Helm represents resources used by a Helm module
message HELM{
    // Release records a Helm release used by a Helm module workload.
    google.protobuf.Struct release = 1;
    // HelmRelease records a Helm repository used by a Helm module workload.
    google.protobuf.Struct repository = 2;
}

// Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
message Terraform{
    // Configuration is Terraform Configuration
    string configuration = 1;
    // Type specifies which Terraform configuration it is, HCL or JSON syntax
    string type = 2;
    // Path is the sub-directory of remote git repository. It's valid when remote is set
    string path = 3;
    // WriteConnectionSecretToReference specifies the namespace and name of a
	// Secret to which any connection details for this managed resource should
	// be written. Connection details frequently include the endpoint, username,
	// and password required to connect to the managed resource.
    Reference write_connection_secret_to_reference = 4;
    // ProviderReference specifies the reference to Provider
    Reference provider_ref = 5;
    // DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
	bool delete_resource = 6;
    // Region is cloud provider's region. It will override the region in the region field of ProviderReference
    string region = 7;
}

//
// Workload
//

// WorkloadGVK with the underlying GVK.
message WorkloadGVK{
    string api_version = 1;
    string kind = 2;
}

// WorkloadTypeDescriptor to refer to a workload type.
message WorkloadTypeDescriptor{
    string type = 1;
    WorkloadGVK definition = 2;
}

// 
// Traits
//

// TraitDefinition with the definition of a trait
message TraitDefinition {
    // ApiVersion of the given trait definition.
    string api_version = 1;
    // Kind of the trait definition.
    string kind = 2;
    // Metadata associated with the trait definition.
    Metadata metadata = 3;
    // Spec of the trait definition.
    TraitDefinitionSpec spec = 4;
}

// TraitDefinitionSpec with the spec of a trait
message TraitDefinitionSpec {
    // DefinitionRef to the CustomResourceDefinition that defines this trait kind.
    Reference definition_ref  = 1;
    // Revision indicates whether a trait is aware of component revision
    bool revision_enabled = 2;
    // WorkloadRefPath indicates where/if a trait accepts a workloadRef object    
    string workload_ref_path = 3;
    // PodDisruptive specifies whether using the trait will cause the pod to restart or not.
    bool pod_disruptive = 4;
    // AppliesToWorkloads specifies the list of workload kinds this trait
    repeated string applies_to_workloads = 5;
    // ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait.
    // Traits that omit this field can work with any other traits.
    // Example rules:
    // "service" # Trait definition name
    // "services.k8s.io" # API resource/crd name
    // "*.networking.k8s.io" # API group
    // "labelSelector:foo=bar" # label selector
    // labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse    
    repeated string conflicts_with = 6;
    // Schematic defines the data format and template of the encapsulation of the trait
    Schematic schematic = 7;
    // Status defines the custom health policy and status message for trait
    Status status = 8;
    // ManageWorkload defines the trait would be responsible for creating the workload
    bool manage_workload = 9;
    // SkipRevisionAffect defines the update this trait will not generate a new application Revision
    bool skip_revision_affect = 10;
}

//
// Scopes
//

// ScopeDefinition with the definition of a scope in oam3
message ScopeDefinition {
    // ApiVersion of the given scope definition.
    string api_version = 1;
    // Kind of the scope definition.
    string kind = 2;
    // Metadata associated with the scope definition.
    Metadata metadata = 3;
    // Spec of the scope definition.
    ScopeDefinitionSpec spec = 4;
}

// ScopeDefinitionSpec with the specification associated with a Scope.
message ScopeDefinitionSpec {
    // DefinitionRef to the CustomResourceDefinition that defines this scope kind.
	Reference definition_ref = 1;

	// WorkloadRefsPath indicates if/where a scope accepts workloadRef objects
	string workload_refs_path = 2;

	// AllowComponentOverlap specifies whether an OAM component may exist in
	// multiple instances of this kind of scope.
	bool allow_component_overlap = 3;
}

//
// PolicyDefinition
//

// PolicyDefinition is the Schema for the policydefinitions API
message PolicyDefinition{
    // ApiVersion of the given policy definition.
    string api_version = 1;
    // Kind of the policy definition.
    string kind = 2;
    // Metadata associated with the policy definition.
    Metadata metadata = 3;
    // Spec of the policy definition.
    PolicyDefinitionSpec spec = 4;
}

// PolicyDefinitionSpec defines the desired state of PolicyDefinition
message PolicyDefinitionSpec {
    // DefinitionRef to the CustomResourceDefinition that defines this policy kind.
	Reference definition_ref = 1;
    // Schematic defines the data format and template of the encapsulation of the policy
    Schematic schematic = 2;
}


//
// WorkflowStep
//

// WorkflowStepDefinition with the elements that define a workflow.
message WorkflowStepDefinition{
    // ApiVersion of the given workflow step definition.
    string api_version = 1;
    // Kind of the workflow step definition.
    string kind = 2;
    // Metadata associated with the workflow step definition.
    Metadata metadata = 3;
    // Spec of the workflow step definition.
    WorkflowStepDefinitionSpec spec = 4;
}

// WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
message WorkflowStepDefinitionSpec{
    // DefinitionRef to the CustomResourceDefinition that defines this workflow step kind.
	Reference definition_ref = 1;
    // Schematic defines the data format and template of the encapsulation of the workflow step
    Schematic schematic = 2;
}

//
// Application
//

// Application entity describing the components that form an application.
message Application{
    // ApiVersion of the given application.
    string api_version = 1;
    // Kind of the application.
    string kind = 2;
    // Metadata associated with the application.
    Metadata metadata = 3;
    // Spec of the application.
    ApplicationSpec spec = 4;
    // Status of the application.
    ApplicationStatus status = 5;
}

// ApplicationSpec with the specification of the application including components, policies and workflows.
message ApplicationSpec{
    // Components associated with the application.
    repeated ApplicationComponent components = 1;

    // Policies defines global characteristics for all components in the application. The evaluation of policies occurrs
    // after the components are rendered, and before the workflow steps are triggered.
    repeated ApplicationPolicy policies = 2;

    // Workflow associated with the application. If present, the workflow defines a series of steps that are executed in order
    // with the AppRevision as source. Notice that the runtime does not applies resources if a workflow is present, as this is
    // delegated to the workflow processing stage.
    ApplicationWorkflow workflow = 3;
}

// ApplicationComponent describes how to instantiate a component that is part of an application.
message ApplicationComponent{
    // Name of the component.
    string name = 1;
    // Type of the component associated with the ComponentDefinition.
    string type = 2;
    // ExternalRevision of the component.
    string external_revision = 3;
    // Properties of the component. This field sets the values to the parameters exposed from the component schematic.
    google.protobuf.Struct properties = 4;
    // DependsOn indicates component dependencies.
    repeated string depends_on = 5;
    // Inputs that are used in the component.
    repeated InputItem inputs = 6;
    // Outputs produced by the component.
    repeated OutputItem outputs = 7;
    // Traits applied in the component.
    repeated ApplicationTrait traits = 8;
    // Scopes being applied to the component in the form of scope-type:scope-instance-name.
    map<string, string> scopes = 9;
    // Images used by the component definition
    repeated string images = 10;
}
// InputItem defines values that are taken from other components or workflow steps and can be used as parameters.
message InputItem{
    // ParameterKey poiting to where the value will be applied.
    string parameter_key = 1;
    // From indicating the source of the value.
    string from = 2;
}

// OutputItem defines values that are exposed by this component or workflow step.
message OutputItem{
    // ValueFrom indicates the source of the value.
    string value_from = 1;
    // Name of the value for future referencing.
    string name = 2;
}

// ApplicationTrait with the properties of a traits that is being applied to a component.
message ApplicationTrait{
    // Type of the trait.
    string type = 1;
    // Properties of the trait
    google.protobuf.Struct properties = 2;
}

// ApplicationPolicy defines a global policy for the all components in the application.
message ApplicationPolicy{
    // Name of the policy.
    string name = 1;
    // Type of policy.
    string type = 2;
    // Properties of the policy.
    google.protobuf.Struct properties = 3;
}

// ApplicationWorkflow defines a workflow that is executed at an application level.
message ApplicationWorkflow{
    // steps with an array of steps
    repeated WorkflowStep steps = 1;
}

// WorkflowStep defining a stage in the workflow process.
message WorkflowStep{
    // Name of the step.
    string name = 1;
    // Type of step.
    string type = 2;
    // Properties of the step type.
    google.protobuf.Struct properties = 3;
    // DependsOn indicates step dependencies.
    repeated string depends_on = 4;
    // Inputs that are used in the workflow step.
    repeated InputItem inputs = 5;
    // Outputs produced by the workflow step.
    repeated OutputItem outputs = 6;
}

// ApplicationStatus with the overall application status including components, traits, and workflow.
message ApplicationStatus{
    // Conditions of the application.
    repeated Condition conditions = 1;
    // Status of the application.
    string status = 2;
    // Services record the status of the application components.
    repeated ApplicationComponentStatus services = 3;
    // Workflow status.
    WorkflowStatus workflow = 4;
}

// Condition in which a resource can be.
message Condition{
    // Type of this condition. At most one of each condition type may apply to
	// a resource at any point in time.
    string type = 1;
    // Status of this condition
    string status = 2;
    // LastTransitionTime is the last time this condition transitioned from one
	// status to another.
    // It is represented in RFC3339 form and is in UTC.
    string last_transition_time = 3;
    // Reason for this condition's last transition from one status to another.
    string reason = 4;
    // Message containing details about this condition's last transition from
	// one status to another, if any.
    string message = 5;
}

// ApplicationComponentStatus defines the status of a component.
message ApplicationComponentStatus{
    // Name with the name of the application component
    string name = 1;    
    // Healty with a bool to indicate if the application component is healthy or not
    bool healthy = 2;
    // Message with information about health status of App component
    string message = 3;
    // Traits with the traits health status
    repeated ApplicationTraitStatus traits = 4;
}

// ApplicationTraitStatus defines the status of a trait linked to a component.
message ApplicationTraitStatus{
    // Type with the trait name
    string type = 1;
    // Healthy with a bool to indicate if the trait is healthy or no
    bool healthy = 2;
    // Message with information about health status of trait
    string message = 3;
}

// WorkflowStatus defines the overall status of an application workflow
message WorkflowStatus{
    // AppRevision with the application revision
    string app_revision = 1;
    // Mode with the mode of the workflw (DAG od StepByStep)
    string mode = 2;
    // Message with information about health status of workflow
    string message = 3;
    // Suspend to indicate if the workflow is suspend
    bool suspend = 4;
    // Terminated to indicate if the workflow is terminated
    bool terminated = 5;
    // Finished indicates that the workflow was completely executed with success.
    bool finished = 6;
    // steps wit information about the steps in the workflow
    repeated WorkflowStepStatus steps = 7;
    // StartTime with the time when the workflow started
    string start_time = 8;
}

// WorkflowStepStatus defines the status of a single step in an application workflow.
message WorkflowStepStatus{
    // ID with the step identifier
    string id = 1;
    // Name with the step name
    string name = 2;
    // Type with the workflowstep type
    string type = 3;
    // Phase with the phase of the workflowstep (succeeded, failed, stopped or running)
    string phase = 4;
    // Message with information about health status of the workflow step
    string message = 5;
    // Reason with a  brief CamelCase message indicating details about why the workflowStep is in this state.
    string reason = 6;
    // FirstExecuteTime is the first time this step execution.
    string first_execute_time = 7;
    // LastExecuteTime is the last time this step execution.
    string last_execute_time = 8;
}